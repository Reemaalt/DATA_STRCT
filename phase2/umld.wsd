@startuml

class Contact {
    - name: String
    - phoneNumber: String
    - emailAddress: String
    - address: String
    - birthday: String
    - notes: String
    - EventsAndAppointments: linkedlist<Events>
    + Contact(name: String, phoneNumber: String, emailAddress: String, address: String, birthday: String, notes: String)
    + addEvent(event: Events): void
    + getName(): String
    + setName(name: String): void
    + getPhoneNumber(): String
    + setPhoneNumber(phoneNumber: String): void
    + getEmailAddress(): String
    + setEmailAddress(emailAddress: String): void
    + getAddress(): String
    + setAddress(address: String): void
    + getBirthday(): String
    + setBirthday(birthday: String): void
    + getNotes(): String
    + setNotes(notes: String): void
    + getEvents(): linkedlist<Events>
    + compareTo(o: Contact): int
    + compareToPhone(PhoneNum: String): int
    + toString(): String
    + getEventsAndAppointments(): linkedlist<Events>
    + setEventsAndAppointments(eventsAndAppointments: linkedlist<Events>)
}

class Events {
    - title: String
    - dateTime: String
    - location: String
    - isAppointment: boolean
    - contactname: String
    + Events(title: String, dateTime: String, location: String, isAppointment: boolean, contactname: String)
    + getTitle(): String
    + setTitle(title: String): void
    + getDateTime(): String
    + setDateTime(dateTime: String): void
    + getLocation(): String
    + setLocation(location: String): void
    + isAppointment(): boolean
    + setAppointment(appointment: boolean): void
    + getContactname(): String
    + setContactname(contactname: String): void
    + toString(): String
    + toStringevents(): void
}

class ContactBST<T extends Comparable<T>> {
    - root: Node<Contact>
    + ContactBST()
    + isEmpty(): boolean
    + searchKey(key: String): Contact
    + searchKeyRecursive(info: Node<Contact>, key: String): Contact
    + findkey(name: String): boolean
    + addcontact(contact: Contact, name: String): boolean
    + deleteContact(name: String): void
    + removeNode(root: Node<Contact>, name: String): Node<Contact>
    + findSuccessor(root: Node<Contact>): Node<Contact>
    + contactExists(contact: Contact): boolean
    + contactExists(node: Node<Contact>, contact: Contact): boolean
    + searchSameFirstName(name: String): void
    + searchSameFirstNameRec(p: Node<Contact>, name: String): void
    + searchByCriteria(criteria: int, value: String): void
    + searchByCriteriaRec(p: Node<Contact>, criteria: int, value: String): void
    + toString(): String
}

class linkedlist<T> {
    - head: nodeLL<T>
    + linkedlist()
    + getHead(): nodeLL<T>
    + setHead(head: nodeLL<T>): void
    + isEmpty(): boolean
    + size(): int
    + addContact(contactname: String): void
    + add(val: Events): void
    + deleteContact(contact: String): void
}

class nodeLL<T> implements Comparable<nodeLL<Events>> {
    - data: T
    - next: nodeLL<T>
    + nodeLL()
    + nodeLL(val: T)
    + getNext(): nodeLL<T>
    + setNext(next: nodeLL<T>): void
    + getData(): T
    + setData(data: T): void
    + compareTo(o: nodeLL<Events>): int
}

class PhoneBook {
    - contactTree: ContactBST<Contact>
    - allEvents: linkedlist<Events>
    + printEventsByTitleOrContact(searchTerm: String): void
    + containsIgnoreCase(list: linkedlist<String>, searchTerm: String): boolean
    + listAllEventsAlphabetically(): void
    + addContact(c: Contact, name: String): void
    + eventConflict(contact: Contact, newEvent: Events): boolean
    + addEventOrAppointment(event: Events, contact: Contact): boolean
    + runPhoneBook(): void
    + main(args: String[]): void
}

class Node<T extends Comparable<T>> {
    - key: String
    - data: T
    - left: Node<T>
    - right: Node<T>
}

ContactBST --|> Node
ContactBST *-- "1" linkedlist : "contains"
PhoneBook *-- Contact
PhoneBook *-- Events
PhoneBook *-- ContactBST
PhoneBook *-- linkedlist
Contact *-- linkedlist
Events *-- linkedlist
linkedlist --|> nodeLL
linkedlist *-- "1" linkedlist : "contains"
nodeLL *-- Events
PhoneBook --|> ContactBST

@enduml
